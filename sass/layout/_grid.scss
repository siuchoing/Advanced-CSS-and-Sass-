.row {
  max-width: $grid-width;       // 1140px;
  background-color: #eee;
  margin: 0 auto;               // when top is 0, left and right be the same, so the element will be centered

  &:not(:last-child) {          // .row:last-child()
    margin-bottom: $gutter-vertical;
  }

  @include clearfix;

  [class^="col-"] {    // all the class attribute start with col.
    background-color: orangered;
    float: left;

    &:not(:last-child) {          // .row:last-child()
      margin-right: $gutter-horizontal;
    }
  }

  // select any classes attribute which contain this part col
  [class*="col-"] {  }

  // any class attribute that ends with col dash.
  [class$="col-"] { }

  //.col-x-of-y
  .col-1-of-2 {                                                   // #x * ((100% - (y-1) * 6rem) / y) + (x-1) * 6rem
    width: calc((100% - 1 * #{$gutter-horizontal}) / 2);          // 1 * ((100% - (2-1) * 6rem) / 2) + (1-1) * 6rem
  }

  .col-1-of-3 {
    width: calc((100% - 2 * #{$gutter-horizontal}) / 3);          // 1 * ((100% - (3-1) * 6rem) / 3) + (1-1) * 6rem
  }

  .col-2-of-3 {                                                     // 2 * ((100% - (3-1) * 6rem) / 3) + (2-1) * 6rem
    width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
  }

  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);          // 1 * ((100% - (4-1) * 6rem) / 4)
  }

  .col-2-of-4 {
    width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
  }

  .col-3-of-4 {
    width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
  }
}